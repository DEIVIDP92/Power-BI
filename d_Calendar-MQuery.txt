

-------------- SPANISH AT THE END --------------

let
    //Identify today's date
    Today = DateTime.Date(DateTime.LocalNow()),
    //Returns the first of January of the corresponding year to the minimum date (subtracting 2 years to start in 2010)
    MinDate = #date(2019, 1, 1),
    //Returns the thirty-first of December of the corresponding year to the maximum date (adding 3 years to always have three years ahead of the last date)
    MaxDate = Date.AddYears(Date.EndOfYear(Today), 1),
    //Calculates the difference in days between the maximum date and the minimum date and adds 1 to always include the 31/12/LastYear
    Duration = Duration.Days(Duration.From(MaxDate - MinDate)) + 1,
    //Creates a list of dates from MinDate to MaxDate, increasing by one day
    Date = List.Dates(MinDate, Duration, #duration(1,0,0,0)),
    //Converts the list into a table (the base of the calendar)
    #"Converted to Table" = Table.FromList(Date, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    //Renames the columns of the table
    #"Renamed Columns" = Table.RenameColumns(#"Converted to Table",{{"Column1", "Date"}}),
    //Changes the data type of the Date column to date
    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Date", type date}}),
    //Adds a Year column
    Year = Table.AddColumn(#"Changed Type", "Year", each Date.Year([Date])),
    // Adds a Semester column
    SemesterColumn = Table.AddColumn(Year, "Semester", each "S" & Text.From(Number.RoundUp(Date.Month([Date]) / 6, 0))),
    // Adds a Semester column but in intenger format
    SemesterColumnNum = Table.AddColumn(SemesterColumn, "SemesterNum", each Text.From(Number.RoundUp(Date.Month([Date]) / 6, 0))),
    // Adds a Quarter column
    QuarterColumn = Table.AddColumn(SemesterColumnNum, "Quarter", each "Q" & Text.From(Number.RoundUp(Date.Month([Date]) / 4, 0))),
    //Adds a Quarte column in intenger forma
    QuarterColumnNum = Table.AddColumn(QuarterColumn, "QuarterNum", each Text.From(Number.RoundUp(Date.Month([Date]) / 4, 0))),
    //Adds a YearMonth column
    YearMonth = Table.AddColumn(QuarterColumnNum, "YearMonthNum", each Date.ToText([Date], "yyyyMM")),
    //Adds a Month Number column
    MonthNum = Table.AddColumn(YearMonth, "MonthNum", each Date.Month([Date])),
    //Adds a Month column
    MonthColumn = Table.AddColumn(MonthNum, "Month", each Date.MonthName([Date], "en-UK")),
    //Adds a Week Number column
    WeekNumber = Table.AddColumn(MonthColumn, "WeekNum", each Date.WeekOfYear([Date])),
    //Adds a Day Number column
    DayNumber = Table.AddColumn(WeekNumber, "DayNum", each Date.DayOfWeek([Date]) + 1),
    //Adds a Day column
    Day = Table.AddColumn(DayNumber, "Day", each Date.DayOfWeekName([Date])),
    //Changes all data type to avoid errors when duplicating columns
    #"Changed Type1" = Table.TransformColumnTypes(Day,{{"Year", type text}, {"Semester", type text}, {"SemesterNum", Int64.Type}, {"Quarter", type text}, {"QuarterNum", Int64.Type}, {"YearMonthNum", Int64.Type}, {"MonthNum", Int64.Type}, {"Month", type text}, {"WeekNum", Int64.Type}, {"DayNum", Int64.Type}, {"Day", type text}}),
    //Shorten version of Month
    MothShort = Table.AddColumn(#"Changed Type1", "MonthShort", each Text.Start([Month], 3)),
    //Shorten version of Day
    DayShort = Table.AddColumn(MothShort, "DayShort", each Text.Start([Day], 3)),
    //Shorten version of Year
    YearShort = Table.AddColumn(DayShort, "YearShort", each Text.End([Year], 2)),
    //Changes all data type to avoid errors when duplicating columns
    #"Changed Type3" = Table.TransformColumnTypes(YearShort,{{"MonthShort", type text}, {"DayShort", type text}, {"YearShort", type text}}),
    //Shorten version of MonthYear
    MonthYearShort = Table.AddColumn(#"Changed Type3", "MonthYearShort", each Text.Combine({[MonthShort], [YearShort]}, " - "), type text),
    //YearNum in intenger column
    YearNum = Table.DuplicateColumn(MonthYearShort, "Year", "YearNum"),
    //Changes the data type to avoid errors when duplicating columns
    #"Changed Type2" = Table.TransformColumnTypes(YearNum,{{"YearNum", Int64.Type}}),
    // Current year identifier
    CurrentYear = Table.AddColumn(#"Changed Type2", "CurrentYear", each if [Year] = Date.Year(DateTime.LocalNow()) then 1 else 0),
    // Year to Date identifier
    YearToDate = Table.AddColumn(CurrentYear, "YearToDate", each if Date.Month([Date]) >= 1 and Date.Month([Date]) <= Date.Month(DateTime.LocalNow()) then 1 else 0 ),
    // Quarter to Date identifier
    QuarterToDate = Table.AddColumn(YearToDate, "QuarterToDate", each if Date.QuarterOfYear([Date]) <= Date.QuarterOfYear(DateTime.LocalNow()) then 1 else 0 ),
    // 12 Months rolling period from today identifier
    Months12Rolling = Table.AddColumn(QuarterToDate, "12MonthsRolling", each if [Date] >= Date.From(DateTime.LocalNow()) - #duration(365, 0, 0, 0) then 1 else 0),
    //Changes the previous columns data type
    #"Changed Type4" = Table.TransformColumnTypes(Months12Rolling,{{"YearToDate", Int64.Type}, {"QuarterToDate", Int64.Type}, {"12MonthsRolling", Int64.Type}, {"CurrentYear", Int64.Type}})
in
    #"Changed Type4"

----------------------- 

let 
            //Identificar fecha de hoy
            Today = DateTime.Date(DateTime.LocalNow()),
            //Devuelve el primero de enero del año correspondiente a la fecha mínima (Se le restan 2 años para empezar en 2010)
            MinDate = #date(2023, 1, 1), 
            //Devuelve el treinta y uno de diciembre del año correspondiente a la fecha máxima (Se le suman 3 años para tener siempre tres años por delante de la última fecha) 
            MaxDate = Date.AddYears(Date.EndOfYear(Today), 1),
            //Calcula la diferencia en días de la fecha máxima con respecto a la fecha mínima y se le suma 1 para que siempre cuente el 31/12/ÚltimoAño 
            Duration = Duration.Days(Duration.From(MaxDate - MinDate)) + 1,
            //Crea una lista con las fechas desde MinDate hasta MaxDate aumentando día a día 
            Date = List.Dates(MinDate, Duration, #duration (1,0,0,0)),
            //Convierte la lista en una tabla (La base del calendario)
            #"Converted to Table" = Table.FromList(Date, Splitter.SplitByNothing(), null, null, ExtraValues.Error), 
            #"Renamed Columns" = Table.RenameColumns(#"Converted to Table",{{"Column1", "Date"}}),
            #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"Date", type date}}),
            //Agregar columna Año
            Year = Table.AddColumn(#"Changed Type", "Year", each Date.Year([Date]), Int64.Type),
            //Agregar columna Semestre
            //SemestreColumna = Table.AddColumn(Year, "Semestre", each "S" & Text.From(Number.RoundUp(Date.Month([Date]) / 6, 0)), type text),
            //Agregar columna Cuatrimestre
            //CuatrimestreColumna = Table.AddColumn(SemestreColumna, "Cuatrimestre", each "Q" & Text.From(Number.RoundUp(Date.Month([Date]) / 4, 0)), type text),
            //Agrear columna AñoMes
            YearMonth = Table.AddColumn(Year, "Year Month", each Date.ToText([Date], "yyyyMM"), type text),
            //Agregar columna NumMes
            MonthNumber = Table.AddColumn(YearMonth, "Month Number", each Date.Month([Date]), Int64.Type),
            //Agregar columna Mes
            Month = Table.AddColumn(MonthNumber, "Month", each Date.MonthName([Date], "en-US"), type text),
            //Agregar columna NumSemana
            //NumSemana = Table.AddColumn(MesColumna, "NumSemana", each Date.WeekOfYear([Date]), Int64.Type),
            //Agregar columna NumDía
            //NumDía = Table.AddColumn(NumSemana, "NumDía", each Date.DayOfWeek([Date]) + 1, Int64.Type),
            //Agregar columna Día
            //Día = Table.AddColumn(NumDía, "Día", each Date.DayOfWeekName([Date]), type text),
            //Agregar festivos
            //Combinar Calendario con tabla de festivos nacionales
            //CombinarConsultas = Table.NestedJoin(Día, {"Date"}, #"FestivosNacionales", {"Date"}, "DíasFestivos", JoinKind.LeftOuter),
            //Expandir festivos nacionales
            //Festivos = Table.ExpandTableColumn(CombinarConsultas, "DíasFestivos", {"Festivo"}, {"Festivo"}),
            //Identificador de días laborables
            //Laborable = Table.AddColumn(Festivos, "Laborable", each if [Festivo] <> null or [NumDía] >= 6 then 0 else 1, Int64.Type),
            //Identificador del año actual
            CurrentYear = Table.AddColumn(Month, "Current Year", each if [Year] = Date.Year(DateTime.LocalNow()) then 1 else 0, Int64.Type),
    #"Changed Type1" = Table.TransformColumnTypes(CurrentYear,{{"Year Month", Int64.Type}, {"Date", type date}})
in
    #"Changed Type1"
